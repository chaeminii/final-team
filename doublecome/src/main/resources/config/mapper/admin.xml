<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="kr.co.doublecome.repository.mapper.AdminMapper">

	<select id="selectUserForAdmin" parameterType="SearchUser"
		resultType="User">
		select full.*,
			   count(*) over() as user_cnt	
		  from (select distinct
					   u.*,
					   <if test="type != null">
						   ifnull(user_reported_cnt,0) as user_reported_cnt,
					   </if>
					   ifnull(cnt1,0) + ifnull(cnt2,0) as user_deal_cnt
				  from user u
				  left outer join (select deal.user_email_buyer,
										  count(*) over(partition by deal.user_email_buyer) as cnt1
									 from deal) d1
					on u.user_email = d1.user_email_buyer
				  left outer join (select deal.user_email_seller,
										  count(*) over(partition by deal.user_email_seller) as cnt2
									 from deal) d2
					on u.user_email = d2.user_email_seller	
					
					<if test="type != null">
		 		  left outer join (select report_receiver,             
								    count(*) over(partition by report_receiver) as user_reported_cnt           
                                	 from report) r      
		    	  	on u.user_email = r.report_receiver	
		 			</if>
					
					
					) full
					
		 <where>
		 		<if test="type != null">
		 			and user_reported_cnt > 0
		 			<choose>
						<when test="startReportedCnt!= null and endReportedCnt != null">
							and user_reported_cnt between #{startReportedCnt} and #{endReportedCnt}
						</when>
						<when test="startReportedCnt == null and endReportedCnt != null">
							and user_reported_cnt <![CDATA[<]]>= #{endReportedCnt}
						</when>
						<when test="startReportedCnt != null and endReportedCnt == null">
							and user_reported_cnt <![CDATA[>]]>= #{startReportedCnt} 
						</when>
					</choose>
		 		</if>
		 		
					<choose>
						<when test="startScore != null and endScore != null">
							and user_score between #{startScore} and #{endScore}
						</when>
						<when test="startScore == null and endScore != null">
							and user_score <![CDATA[<]]>= #{endScore}
						</when>
						<when test="startScore != null and endScore == null">
							and user_score <![CDATA[>]]>= #{startScore} 
						</when>
					</choose>
					
					<choose>
						<when test="startDealCnt != null and endDealCnt != null">
							and user_deal_cnt between #{startDealCnt} and #{endDealCnt}
						</when>
						<when test="startDealCnt == null and endDealCnt != null">
							and user_deal_cnt <![CDATA[<]]> #{endDealCnt} + 1
						</when>
						<when test="startDealCnt != null and endDealCnt == null">
							and user_deal_cnt <![CDATA[>]]> #{startDealCnt} - 1  
						</when>
					</choose>
					
					<choose>
						<when test="startReviewCnt != null and endReviewCnt != null">
							and user_review_cnt between #{startReviewCnt} and #{endDealCnt}
						</when>
						<when test="startReviewCnt == null and endReviewCnt != null">
							and user_review_cnt <![CDATA[<]]> #{endReviewCnt} + 1
						</when>
						<when test="startReviewCnt != null and endReviewCnt == null">
							and user_review_cnt <![CDATA[>]]> #{startReviewCnt} - 1 
						</when>
					</choose>
					
				<choose>
					<when test="SearchType == 'userEmail'">
						and	user_email like CONCAT('%',#{keyword},'%')
					</when>
					<when test="SearchType == 'userNickname'">
						and	user_nickname like CONCAT('%',#{keyword},'%')
					</when>
					<when test="SearchType == 'userPhnum'">
						and	user_phnum like CONCAT('%',#{keyword},'%')
					</when>						
				</choose>
		</where>			
		
		<choose>
			<when test='sort == "userEamil"'>
				order by user_email		
			</when>
			<when test='sort == "userNickname"'>
				order by user_nickname		
			</when>
			<when test='sort == "userDealCnt"'>
				order by user_deal_cnt desc		
			</when>
			<when test='sort == "userReviewCnt"'>
				order by user_review_cnt desc		
			</when>
			<when test='sort == "userReportedCnt"'>
				order by user_reported_cnt desc		
			</when>
		</choose>
		
		limit #{begin},#{listSize}
	</select>

	<select id="selectReportByUserEmail" parameterType="SearchUser" resultType="Report">
		select *, 
		 	   count(*) over() as report_cnt,
         	   rt.report_type_name
		  from report r
  		 inner join report_type rt
	  	    on r.report_type_code = rt.report_type_code  
		 where report_receiver = #{keyword}
		 limit #{begin},#{listSize}
	</select>

</mapper>