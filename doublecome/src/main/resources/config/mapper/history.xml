<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.doublecome.repository.mapper.HistoryMapper">	
	<!-- 공통 페이징 footer -->
	<sql id="commonPagingFooter">
		limit #{begin}, #{listSize}
	</sql>
	
	<!-- 받은 후기 개수 -->
	<select id="receiveReviewCnt" resultType="int" parameterType="String">
		select count(*)
		  from review
		 where review_receiver = #{userEmail}
	</select>
	
	<!-- 받은 후기 목록 -->
	<select id="selectReceiveReview" resultType="Review" parameterType="InfinitePage">
		select r.*, 
			   a.auction_title, 
			   u.user_nickname as sender_nickname,
			   count(*) over() as reviewCnt
		  from review r
		 inner join deal d
		    on r.deal_no = d.deal_no
		 inner join auction a
		    on d.auction_no = a.auction_no
		 inner join user u 
		    on u.user_email = r.review_sender
		 where r.review_receiver = #{userEmail}
		 order by review_no
		 limit #{begin}, 5
	</select>
	
	<!-- 보낸 후기 개수 -->
	<select id="sendReviewCnt" resultType="int" parameterType="String">
		select count(*)
		  from review
		 where review_sender = #{userEmail}
	</select>
	
	<!-- 보낸 후기 목록 -->
	<select id="selectSendReview" resultType="Review" parameterType="InfinitePage">
		select r.*, 
			   a.auction_no, 
			   a.auction_title, 
			   u.user_nickname as sender_nickname,
			   count(*) over() as reviewCnt
		  from review r
		 inner join deal d
		    on r.deal_no = d.deal_no
		 inner join auction a
		    on d.auction_no = a.auction_no
		 inner join user u 
		    on u.user_email = r.review_sender
		 where r.review_sender = #{userEmail}
	 		<choose>
	 			<when test="search = 'grade'">
					 order by r.review_score desc, r.review_reg_date
	 			</when>
	 			<when test="search = 'recenccy'">
				 	 order by r.review_reg_date desc
	 			</when>
	 			<when test="search = null">
				 	 order by r.review_reg_date desc
	 			</when>
	 		</choose>
		 limit #{begin}, 5
	</select>
	
	<!-- 구매횟수, 판매횟수, 후기갯수 -->
	<select id="userInfo" resultType="History" parameterType="String">
		select distinct u.*,
			   count(ds.user_email_seller) over(partition by ds.user_email_seller) as sell_cnt,
			   count(db.user_email_buyer) over(partition by db.user_email_buyer) as buy_cnt
		  from user u
		  left join deal ds
		    on u.user_email = ds.user_email_seller
		   and ds.deal_condition = 2
		  left join deal db
		    on u.user_email = db.user_email_buyer
		   and db.deal_condition = 2
		 where user_email = #{userEmail}
	</select>
	
	<!-- 판매내역 -->
	<select id="saleHistory" resultType="Auction" parameterType="String">
		select distinct a.*, 
		       max(b.bid_price) over(partition by b.auction_no) as max_price,
		       r.review_sender,
		       u.user_nickname
		  from auction a
		 inner join user u
		    on a.user_email = u.user_email
		  left join deal d
		    on a.user_email = d.user_email_seller
		   and a.auction_no = d.auction_no
	     left join bid b
            on a.auction_no = b.auction_no
         left join review r
            on d.deal_no = r.deal_no
           and a.user_email = r.review_sender
		where a.user_email = #{userEmail};
	</select>
	
	<!-- 구매내역 -->
	<select id="buyHistory" resultType="Auction" parameterType="String">
		select distinct a.*, 
			   max(b.bid_price) over(partition by b.auction_no) as bid_price,
			   u.user_nickname,
			   r.review_sender
		  from auction a
		 inner join user u
		    on a.user_email = u.user_email
		  left join deal d
		    on a.auction_no = d.auction_no
	      left join bid b
            on a.auction_no = b.auction_no
          left join review r
            on d.deal_no = r.deal_no
           and d.user_email_buyer = r.review_sender
	   	 where d.user_email_buyer = #{userEmail}
	</select>
	
	<!-- 후기 등록시 거래정보  -->
	<select id="dealInfo" parameterType="int" resultType="Deal">
		select *
		  from deal
		 where auction_no = #{auctionNo} 
	</select>
	
	<!-- 후기등록 -->
	<insert id="insertReview" parameterType="Review" >
		<selectKey order="AFTER">
			update user set user_review_cnt = user_review_cnt + 1;
		</selectKey>
		insert into review (
		review_title, review_content, deal_no, review_sender, review_receiver, review_score
		) values (
			#{reviewTitle},
			#{reviewContent},
			#{dealNo},
			#{reviewSender},
			#{reviewReceiver},
			#{reviewScore}
		)
	</insert>
	
	<!-- 후기삭제 -->
	<delete id="deleteReview" parameterType="Review">
		delete from review
		 where review_no = #{reviewNo}
	</delete>
</mapper>